name: Build & Deploy

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
jobs:
  update-version:
    name: Update Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Git Version
        id: get-version
        uses: codacy/git-version@2.2.0

      - name: Replace Version in package.json
        uses: mingjun97/file-regex-replace@v1
        with:
          regex: '"version": "(.*)",'
          replacement: '"version": "${{ steps.get-version.outputs.version }}",'
          flags: "g"
          include: 'package\.json'
          exclude: '.^'
          encoding: 'utf8'
          path: './music'


      - name: Commit & push new version
        uses: EndBug/add-and-commit@v7
        if: github.ref == 'refs/heads/master'
        with:
          add: 'music/package.json'
          message: 'Bump version to: ${{ steps.get-version.outputs.version }}'
          branch: master
          push: true
          signoff: true
          tag: 'v${{ steps.get-version.outputs.version }}'

      - name: Archive version artifacts
        uses: actions/upload-artifact@v2
        with:
          name: versioned-frontend
          path: ./music

  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 10.x ]
    needs: update-version
    steps:
      - uses: actions/checkout@v2

      - name: Download production artifact
        uses: actions/download-artifact@v2
        with:
          name: versioned-frontend
          path: music

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install NPM Dependencies
        run: yarn
        working-directory: music

      - name: Build production Artifact
        run: yarn build --if-present
        working-directory: music

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: frontend
          path: |
            music/build

  deploy-frontend:
    name: Deploy Frontend to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Download production artifact
        uses: actions/download-artifact@v2
        with:
          name: frontend
          path: music/build

      - name: FTP Deployment Frontend
        uses: airvzxf/ftp-deployment-action@latest
        with:
          server: ${{ secrets.FTP_URL }}
          user: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local_dir: music/build/
          delete: true

  deploy-backend:
    name: Deploy API to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Replace Spotify Client ID
        uses: jwsi/secret-parser@v1
        with:
          # File where GitHub Actions Secrets references should be parsed and replaced
          filename: music-api/function/spotifyService.js
          # Name of secret to search for in the designated file
          secret-name: "SPOTIFY_CLIENT_ID"
          # Value of secret to replace reference with in designated file
          secret-value: ${{ secrets.SPOTIFY_CLIENT_ID  }}

      - name: Replace Spotify Client Secret
        uses: jwsi/secret-parser@v1
        with:
          # File where GitHub Actions Secrets references should be parsed and replaced
          filename: music-api/function/spotifyService.js
          # Name of secret to search for in the designated file
          secret-name: "SPOTIFY_CLIENT_SECRET"
          # Value of secret to replace reference with in designated file
          secret-value: ${{ secrets.SPOTIFY_CLIENT_SECRET  }}

      - name: Change to Function directory
        run: cd music-api/function

      - name: Install dependencies
        run: yarn
      
      - name: Build production Artifact
        run: yarn build

      - name: Create ZIP
        run: zip -j music-api.zip ./build/index.js
      
      - name: Upload ZIP to AWS Lambda
        run: aws lambda update-function-code --function-name get-spotify-playlists --zip-file fileb://music-api.zip

